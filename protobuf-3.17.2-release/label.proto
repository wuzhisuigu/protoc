 /************************************CHANGELOG*********************************************
 *********************当proto message内容有变化时需添加change log*****************************
 +------------------+--------------+-------------------------------------------------------+
 |Time              |Author        |Change Info                                            |
 +------------------+--------------+-------------------------------------------------------+ 
 |2023.05.18        |vis.lan       |package cf.glacier                                     |
 *******************************************************************************************/
  
  
 syntax = "proto3";
  
 // import "google/protobuf/any.proto";
  
 package cf.glacier;
  
 message Point2f {
     float x = 1;
     float y = 2;
     float pos_x = 3;
     float pos_y = 4;
 }
  
 message Size2f {
     float width = 1; 
     float height = 2;
 }

 message DefectRect{
     float ROI_x = 1;
     float ROI_y = 2;
     float ROI_w = 3;
     float ROI_h = 4;
 }
  
 /**
  * 关键点，包含一个坐标以及其他附加信息
  */
 message KeyPoint {
     Point2f location = 1;   // 关键点定位
     string name = 2;        // 关键点名称/类别
     float score = 3;        // 置信度
  
     float angle = 4;        // 角度
     float radius = 5;       // 半径
  
     // map<string, google.protobuf.Any> ext_info = 15;  //扩展字段，用作临时或局部扩展
 }
  
 /**
  * 环， 概念来源于OGC(Open Geospatial Consortium)，此处简化定义为二维平面中的
  * 有向（顺时针/逆时针）的不自相交（也不可自相切）的点的序列, 由于方向可以通过点序列计算出来，
  * 故暂且省略方向。OGC标准中涉及到环是否闭合（首个点与最后一个点的位置相同），
  * 此处规定首尾两点位置不应该相同，在必要时可以自动将首尾点相连。
  */
 message Ring {
     repeated Point2f points = 1;  
     //bool clock_wise = 2 [default = false]; // True => 顺时针， False => 逆时针
 }
  
 /**
  * 多边形， 参考OGC标准，定义为由一个外环和n(n=0, 1, 2, ...)个内环组成的平面几何图形，
  * 内环应在外环内部（可以相切，但不相交），内环之间互不相交（可以相切），互不包含。
  * OGC标准还规定了内环与外环的方向应当相反，但由于方向可自动纠正，故暂且省略。
  */
 message Polygon {
     Ring outer = 1;    //区域外部边框
     repeated Ring inners = 2; //区域内部边框, 仅供有孔洞的区域使用
 }
  
 /**
  * 区域，定义为平面上的一个多边形以及定位在该多边形内部的附加信息所组成的信息区。
  * 这个多边形限定了定位在该区域内部的附加信息的最大作用边界。
  * 所谓最大作用边界是指，对于边界以外的图像区域做任意修改，都不会影响边界内的图像语义。
  */
 message Region {
    Polygon polygon = 1;

    //普通标注区域
    string name = 2;   // 区域的类型名称
    float score = 3;  //置信度分数， 通常情况下，标注的置信度为1

    repeated KeyPoint key_points = 4; //区域内所包含的关键点
    float area = 5;
    float diagonal = 6;
    float width = 7;
    float height = 8;
    float widthAndHeightRatio = 9;
    float grayDiff = 10;
    string display = 11;
    string defectId = 12;  //缺陷ID,用于把彩色图和灰度图的第几个缺陷对应起来
    string string2 = 13;
    float float1  = 14;
    float float2 = 15;

     // map<string, google.protobuf.Any> ext_info = 15;  //扩展字段，用作临时或局部扩展
 }
  
 message Label {
     enum DataSetType{
         Unknown = 0;      //默认为未知类型，数据集类型未知可能导致标签无法正确处理
         Segment = 1;      // 分割模块、非监督分割模块
         Detection = 2;    // 检测、快速检测模块
         Classify = 3;     // 分类模块
         Location = 4;     // 定位模块
     }
  
     DataSetType dataset_type = 1;  //数据集类型
     //全局信息
     Size2f img_size = 2; // 对于任何标签文件，这个字段都是必须的，不可缺省
  
     string name = 3;   // 图片类别, 暂未使用
     float score = 4;
     
     repeated Region regions = 5; //普通标注区域
     repeated Polygon masks = 6;  //单张图像掩码区域
     repeated Polygon hardcases = 7; //训练时需要特别关注的困难区域

     string dieStatus = 8;
     float Part_plc_pulse_x = 9;
     float Part_plc_pulse_y = 10;//拍照PLC 坐标,用于重构defect location map时，精确绘制缺陷位置
     float Die_run_pos_x = 11;
     float Die_run_pos_y = 12;
     DefectRect defectRECT= 13;
     float Measure1 = 14;
     float Measure2 = 15;
     string str1 = 16;
     string str2 = 17;
     float flo1 = 18;
     float flo2 = 19;

     // google.protobuf.Any origin_result = 8; //原始推理结果
  
     // map<string, google.protobuf.Any> ext_info = 15; //扩展字段，用作临时或局部扩展
 }
  
 /***************************针对现有模块的标注使用说明***************************
  # 总体规则
     1.每张图一个标注文件，每个标注文件对应到一个`Label`结构
     2.每个标注文件必须将图片的长和宽设置到`Label.img_size`字段中， 且需在Label.dataset_type中注明数据集类型
  
  # 各个模块标注和检测结果存储和读取对应的字段说明：
     1.分类模块：
         分类模块每张图除img_size外，仅包含一个类别信息(Label.regions(0).name) (检测结果含有一个分 数(Label.regions(0).
         score))。分类模块的Label.regions的长度为1，为方便处理，将图片顶点存在Label.regions(0).polygon中。
         即：类别信息存储在Label.regions(0).name字段, 同时图片的定点矩形也存储在Label.regions(0).polygon中, 且region.name
         需要能在dataset_info.json 中的label_names中找到。
     2.回归分类模块
         在分类模块的基础上，增加了两点区别。一是回归的标注只存在Label.region(0)的name和score，但预测结果除此之外，增加了Label.region(0).key_points信息来
         存储所有类别的name和score信息。其为vector结构，keypoint中只存储了name和score信息，无position信息, 这些信息根据score值进行降序排列。
         二是回归分类的dataset_info.json的label_names 中至少需要一个NG类别，
         底层将"OK"视作OK类。回归分类中可以有OK类别也可以没有。
     3.分割模块：
         分割模块缺陷区域对应Label.regions(n).polygon, 使用Label.regions(n).name来区分不同区域的类别。
         即：标注区域的外边框存储在Label.regions(n).polygon.outer中，对应的内边框存储在Label.regions(n).polygon.inner中，
         区域的类别存储在Label.regions(n).name中，且name可在dataset_info.json中的label_names中找到。
     4.检测模块：
         与分割模块类似，只是取区域时直接取Label.regions(n).polygon的外接矩形。
         即：直接将标注矩形的四个顶点逆时针存储到Label.regions(n).polygon.outer中，类别存储到Label.regions(n).name中，且
         name可在dataset_info.json中的label_names中找到。
     5.快速检测模块: 
         同检测模块，只是不存储类别，即需要保持region.name为空
     6.定位模块：
         定位模块只保存关键点信息，模板匹配结果不保存在标注中(因为模板的定义一旦改变，模板匹配结果将丧失意义)。
         其中Label.regions的长度和关键点数相同，Label.regions(n).key_points只存一个关键点，其中包括这个点的位置、角度、半径、类别。
         而Label.regions(n).polygon保存的是这个以这个关键点为圆心的圆的外接正方形的四个顶点(逆时针)。
         如果没有检测半径或角度，点相应的参数为-1(使用时只需要判断是否为负数)。
         同时，为了方便指标计算，每个region的name为内部点的类别,score为内部点的score。
         而polygon字段保存的是这个以这个关键点为圆心,作用区域(半径或nms的搜索区域)为半径的圆的外接正方形。
         另外还有一种特殊的用法：在工厂模式中，网络返回的结果为模板匹配的结果(如果没有模板则与上面没有区别),polygon字段为匹配出的模板,这个结果不会保存，只用于模块之间的传递。
     7.非监督分割模块：
         与分割模块的标注方法完全一致，只是需要注意：用于训练的图都是无缺陷的图，要求region数量为0，否则该图不会被用于训练。
         由于非监督分割模块只能检测出缺陷，无法对缺陷进行分类，因此统一设置regions(n).name为NG。实际实现时，对该字段
         不做处理，保持默认值即可。
         非监督分割模块的缺陷类似分割模块，缺陷区域对应Label.regions(n).polygon，标注区域的外边框存储在Label.regions(n).polygon.outer中，
         对应的内边框存储在Label.regions(n).polygon.inner中
         regions(n).score设为1
         label.score设置为原图和还原图的对比图(diff_img)中的最大值，也就是【不相似度的最大值】
  
 # 存储与读取
     1. 标签文件后缀为`aqlabel`，文件内容为Label的二进制序列化数据;
     2. C++中标签的读写:
         aidi_vision_v2中提供了LabelBuffer类用于标签文件的读写, 
         写入标签文件的方法如下：
         ```cpp
         aq::aidi::LabelIO buffer;
         int data_len = label.ByteSizeLong();
         label.SerializeToArray(buffer.alloc_data(data_len), data_len);
         buffer.save_to("path/to/1.aqlabel");
         ```
         读取标签文件的方法如下：
         ```cpp
         aq::aidi::LabelIO buffer = aq::aidi::LabelIO::ReadFrom("path/to/1.aqlabel");
         label.ParseFromArray(buffer.data(), buffer.size());
     3. Python中标签的读写：
         ```python
         ```
  *********************************************************************************/


  